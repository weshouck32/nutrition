{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","page","count","data","setData","setIsLoading","APP_KEY","process","useEffect","columns","name","options","sort","customBodyRender","value","class","src","alt","filter","filterType","responsive","serverSide","searchBox","pagination","next","previous","rowsPerPage","displayRows","onTableChange","action","tableState","console","log","rows","getNutirtionData","nix_item_id","$","ajax","url","type","dataType","headers","contentType","success","nutritiondata","api_data","foods","photo","thumb","food_name","serving_qty","serving_unit","serving_weight_grams","nf_calories","nf_total_fat","nf_saturated_fat","nf_cholesterol","nf_sodium","nf_total_carbohydrate","nf_dietary_fiber","nf_sugars","nf_protein","nf_potassium","push","className","id","Button","onClick","query","val","result","i","branded","length","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4c9e95d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {Button} from '@material-ui/core';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport MUIDataTable from 'mui-datatables';\nimport $ from 'jquery';\n\nimport './App.css';\n\nfunction App() {\n  const [page] = useState(1);\n  const [count] = useState(1);\n  const [data, setData] = useState([[\"Loading Data...\"]]);\n  const [setIsLoading] = useState(false);\n\n  const APP_ID = process.env.REACT_APP_NUTRIION_API_APP_ID;\n  const APP_KEY = process.env.REACT_APP_NUTRIION_API_APP_KEY;\n\n    useEffect(() => {\n    //getData();\n  });\n\n  const columns = [\n      {\n        name: \"Image\",\n        options: {\n          sort: true,\n          customBodyRender: (value) => {\n            return (\n            <div><img class=\"App-thumb\" src={value} alt='test' /></div>\n            );\n          },\n\n\n        }\n      },\n      { name: \"brand_name\", options: { filter: true, sort: true, } },\n      { name: \"serving_qty\", options: { filter: true, sort: true, } },\n      { name: \"serving_unit\", options: { filter: true, sort: true, } },\n      { name: \"serving_weight_grams\", options: { filter: true, sort: true, } },\n      { name: \"nf_calories\", options: { filter: true, sort: true, } },\n      { name: \"nf_total_fat\", options: { filter: true, sort: true, } },\n      { name: \"nf_saturated_fat\", options: { filter: true, sort: true, } },\n      { name: \"nf_cholesterol\", options: { filter: true, sort: true, } },\n      { name: \"nf_sodium\", options: { filter: true, sort: true, } },\n      { name: \"nf_total_carbohydrate\", options: { filter: true, sort: true, } },\n      { name: \"nf_dietary_fiber\", options: { filter: true, sort: true, } },\n      { name: \"nf_sugars\", options: { filter: true, sort: true, } },\n      { name: \"nf_protein\", options: { filter: true, sort: true, } },\n      { name: \"nf_potassium\", options: { filter: true, sort: true, } },\n    ];\n\n  //const changePage = (page) => {\n//setIsLoading(true);\n//getData(page);\n\n//getData2(page);\n//setPage(page);\n// this.xhrRequest(http://localhost:3000/api/musers/${page}).then((res) => {\n// this.setState({\n// isLoading: false,\n// page: page,\n// data: res.data,\n// count: res.total,\n// });\n// });\n//};\n\n  const options = {\n    filter: true,\n    filterType: \"checkbox\",\n    responsive: \"stacked\",\n    serverSide: true,\n    count: count,\n    page: page,\n    searchBox: true,\n    pagination: {\n    next: \"Next Page\",\n    previous: \"Previous Page\",\n    rowsPerPage: \"Rows per page:\",\n    displayRows: \"off\",\n    },\n    onTableChange: (action, tableState) => {\n    console.log(action, tableState);\n    // a developer could react to change on an action basis or\n    // examine the state as a whole and do whatever they want\n\n      //switch (action) {\n      //  case \"changePage\":\n      //    changePage(tableState.page);\n      //    alert(page);\n      //    break;\n    //  }\n    },\n  };\n\n  /*\n  const options = {\n  filterType: 'checkbox',\n  serverSide: true,\n  onTableChange: (action, tableState) => {\n    this.xhrRequest('/getdata.js?id=1', result => {\n      this.setState({ data: result });\n    });\n  }\n};\n*/\n\nvar rows = [];\n\nfunction getNutirtionData(nix_item_id) {\n  $.ajax({\n    url: \"https://trackapi.nutritionix.com/v2/search/item\",\n    type: \"GET\",\n    dataType: 'json',\n    headers: { 'x-app-id': APP_ID,\n               'x-app-key': APP_KEY\n             },\n    contentType: 'application/json; charset=utf-8',\n    data: { nix_item_id: nix_item_id },\n    success: function(nutritiondata) {\n      var api_data = [nutritiondata.foods.photo.thumb, nutritiondata.foods.food_name, nutritiondata.foods.serving_qty, nutritiondata.foods.serving_unit,\n                      nutritiondata.foods.serving_weight_grams, nutritiondata.foods.nf_calories, nutritiondata.foods.nf_total_fat,\n                      nutritiondata.foods.nf_saturated_fat, nutritiondata.foods.nf_cholesterol, nutritiondata.foods.nf_sodium, nutritiondata.foods.nf_total_carbohydrate,\n                      nutritiondata.foods.nf_dietary_fiber, nutritiondata.foods.nf_sugars, nutritiondata.foods.nf_protein, nutritiondata.foods.nf_potassium];\n      rows.push(api_data);\n\n    }\n  });\n\n}\n\nconst nutritionSearch = (page = 1) => {\n  setIsLoading(true);\n  $.ajax({\n    url: \"https://trackapi.nutritionix.com/v2/search/instant\",\n    type: \"GET\",\n    dataType: 'json',\n    headers: { 'x-app-id': APP_ID,\n               'x-app-key': APP_KEY\n             },\n    contentType: 'application/json; charset=utf-8',\n    data: { query: $(\"#searchbox\").val() },\n    success: function(result) {\n      rows = [];\n      for (var i = 0; i < result.branded.length; i++) {\n        getNutirtionData(result.branded[i].nix_item_id);\n        //console.log(nutrition_data);\n        //var api_data = [result.branded[i].photo.thumb, result.branded[i].brand_name_item_name, result.branded[i].serving_qty, result.branded[i].serving_unit, \"serving_weight_grams\", result.branded[i].nf_calories, \"nf_total_fat\",\n        //                  \"nf_saturated_fat\", \"nf_cholesterol\", \"nf_sodium\", \"nf_total_carbohydrate\", \"nf_dietary_fiber\",\n        //                  \"nf_sugars\", \"nf_protein\", \"nf_potassium\"];\n        //rows.push(api_data);\n      }\n      setData(rows);\n      setIsLoading(false);\n    }\n  });\n }\n\n  return (\n    <MuiThemeProvider >\n    <div className=\"App\">\n      <h1>Nutrition Information App</h1>\n      <div class=\"row app-text-left\">\n        <input id=\"searchbox\" type=\"text\"></input>\n          <Button onClick={nutritionSearch}>Search</Button>\n      </div>\n      <MUIDataTable title={\"Nutrition Information\"} data={data} columns={columns} options={options} />\n    </div>\n  </MuiThemeProvider >\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}